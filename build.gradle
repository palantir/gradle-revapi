import java.util.stream.Collectors

buildscript {
    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
        gradlePluginPortal() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    dependencies {
        classpath 'com.palantir.jakartapackagealignment:jakarta-package-alignment:0.4.0'
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.11.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.28.0'
    }
}

plugins {
    id 'com.gradle.plugin-publish' version '0.21.0'
    id 'com.palantir.baseline' version '4.13.0'
    id 'com.palantir.consistent-versions' version '2.11.0'
    id 'com.palantir.git-version' version '0.15.0'
 id 'org.inferred.processors' version '3.6.0'
}

repositories {
    mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
}

group 'com.palantir.gradle.revapi'
version System.env.CIRCLE_TAG ?: gitVersion()

apply plugin: 'com.palantir.external-publish'
apply plugin: 'java-gradle-plugin'
apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'com.palantir.external-publish-jar'

sourceCompatibility = 1.8

dependencies {
    implementation 'org.revapi:revapi-basic-features'
    implementation 'org.revapi:revapi-java'
    implementation 'org.revapi:revapi-reporter-text'
    implementation 'org.freemarker:freemarker'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.google.guava:guava'

    testImplementation platform('org.junit:junit-bom')
    testImplementation 'com.netflix.nebula:nebula-test'
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.assertj:assertj-core'
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine"

    annotationProcessor "org.immutables:value"
    annotationProcessor "org.immutables:serial"
    compileOnly "org.immutables:value::annotations"
    compileOnly "org.immutables:serial"
}

allprojects {
    apply plugin: 'com.palantir.java-format'
    apply plugin: 'com.palantir.jakarta-package-alignment'
}

test {
    environment = System.getenv().entrySet().stream()
            .filter { entry -> entry.key != 'CIRCLE_TEST_REPORTS' }
            .collect(Collectors.toMap({ it.key }, { it.value }))
}

gradlePlugin {
    plugins {
        revapi {
            id = 'com.palantir.revapi'
            implementationClass = 'com.palantir.gradle.revapi.RevapiPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/palantir/gradle-revapi'
    vcsUrl = 'https://github.com/palantir/gradle-revapi'
    description = 'API/ABI backwards compatibility for Java libraries using Revapi'
    tags = ['versions']

    plugins {
        revapi {
            displayName = 'API/ABI backwards compatibility for Java libraries using Revapi'
        }
    }
}

tasks.named('processResources').configure {
    duplicatesStrategy 'include'
}

tasks.publish.dependsOn tasks.publishPlugins
publishPlugins.onlyIf {
    versionDetails().isCleanTag
}
project.ext.'gradle.publish.key' = System.env["GRADLE_KEY"]
project.ext.'gradle.publish.secret' = System.env["GRADLE_SECRET"]

